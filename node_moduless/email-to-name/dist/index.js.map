{
  "version": 3,
  "sources": ["../src/email-to-name.js"],
  "sourcesContent": ["const emailToName = (function () {\n\n    const defaults = {\n        removeNumbers: true,\n        removePlusWords: true,\n        titleCase: true,\n        caseMc: true,\n        caseLetterApostrophe: true,\n        uppercaseGenerationalNumbers: true,\n        commaPrependGenerationalPhrase: true,\n        appendPeriodToTitlePrefix: true,\n        lowercaseFamilyParticle: true,\n        commonPersonalIdentifiers: ['hello', 'me', 'email', 'contact'],\n        reverseCommonEmailAddresses: true,\n        companyNames: [],\n    };\n\n    const titles = ['mr', 'mrs', 'ms', 'dr', 'prof'];\n    const suffixes = ['jr', 'jnr', 'sr', 'snr'];\n    const suffixesUpper = ['ii', 'iii', 'iv'];\n\n    return {\n        process: process\n    };\n\n    //////////////////\n\n    function process(str, params) {\n\n        let output = '';\n\n        const settings = Object.assign({}, defaults, params);\n\n        // Is the email address identified a common \"hello\" type string?\n        const identifierIsCommon = matchIdentifierToList(str, settings.commonPersonalIdentifiers);\n\n        // Is the email address from someone with a personal domain?\n        // Checks email address for company name as the identifier\n        const domainIsIdentifier = matchIdentifierToList(str, settings.companyNames);\n\n        // Get the true identifier\n        // -> `companyname@personaldomain.com`. to `personaldomain`\n        // -> `john.smith@gmail.com` to `john.smith`\n        if (settings.reverseCommonEmailAddresses && (identifierIsCommon || domainIsIdentifier)) {\n            output = reverseDomainAndIdentifier(str);\n        } else {\n            output = str.split('@')[0];\n        }\n\n        // Drop everything after the '+'\n        // `john.smith+test` to `john.smith`\n        if (settings.removePlusWords) {\n            output = output.split('+')[0];\n        }\n\n        if (settings.removeNumbers) {\n            output = output.replace(/\\d/g, '');\n        }\n\n        // Replace periods with spaces\n        // `john.smith` to `john smith`\n        output = output.replace(/\\./g, ' ');\n\n        // Replace underscores with spaces\n        // `john_smith` to `john smith`\n        output = output.replace(/_/g, ' ');\n\n        // Replace duplicate strings from inside\n        // `john    smith` to `john smith`\n        output = output.replace(/\\s\\s+/g, ' ');\n\n        // Replace whitespace from both sites of string\n        // `  john smith  ` to `john smith`\n        output = output.trim();\n\n        // Title case\n        // `john smith` to `John Smith`\n        if (settings.titleCase) {\n            output = titleCase(output);\n        }\n\n        // Handle Generational (The Third) names\n        // `John Smith Iii` to `John Smith III`\n        if (settings.uppercaseGenerationalNumbers) {\n            suffixesUpper.forEach(function (suffix) {\n                var rx = new RegExp('\\\\s(' + suffix + ')$', 'gi');\n                output = output.replace(rx, function (s) {\n                    return s.toUpperCase();\n                });\n            });\n        }\n\n        // Handle 'Jr/Sr' names\n        // `John Smith Jr` to `John Smith, Jr.`\n        if (settings.commaPrependGenerationalPhrase) {\n            suffixes.forEach(function (suffix) {\n                var rx = new RegExp('\\\\s(' + suffix + ')$', 'gi');\n                output = output.replace(rx, function (s) {\n                    return ',' + s + '.';\n                });\n            });\n        }\n\n        // Handle title prefixes names\n        // `Dr John Smith` to `Dr. John Smith`\n        if (settings.appendPeriodToTitlePrefix) {\n            titles.forEach(function (prefix) {\n                var rx = new RegExp('^(' + prefix + ')\\\\s', 'gi');\n                output = output.replace(rx, function (s) {\n                    return s.replace(' ', '. ');\n                });\n            });\n        }\n\n        // Handle \"son/daughter\" of pattern\n        if (settings.lowercaseFamilyParticle) {\n            output = output\n                .replace(/\\bAl(?=\\s+\\w)/g, \"al\")     // al Arabic or forename Al.\n                .replace(/\\bAp\\b/g, \"ap\")     // ap Welsh.\n                .replace(/\\bBen(?=\\s+\\w)\\b/g, \"ben\")    // ben Hebrew or forename Ben.\n                .replace(/\\bDell([ae])\\b/g, \"dell$1\") // della and delle Italian.\n                .replace(/\\bD([aeiu])\\b/g, \"d$1\")    // da, de, di Italian; du French.\n                .replace(/\\bDe([lr])\\b/g, \"de$1\")   // del Italian; der Dutch/Flemish.\n                .replace(/\\bEl\\b/g, \"el\")     // el Greek\n                .replace(/\\bLa\\b/g, \"la\")     // la French\n                .replace(/\\bL([eo])\\b/g, \"l$1\")    // lo Italian; le French.\n                .replace(/\\bVan(?=\\s+\\w)/g, \"van\")    // van German or forename Van.\n                .replace(/\\bVon\\b/g, \"von\")    // von Dutch/Flemish\n        }\n\n        // Handle 'Mc' names\n        // `Marty Mcfly` to `Marty McFly`\n        if (settings.titleCase && settings.caseMc) {\n            output = output.replace(/Mc(.)/g, function (m, m1) {\n                return 'Mc' + m1.toUpperCase();\n            });\n        }\n\n        // Handle 'O'Connor' type names\n        // `Flannery O'connor` to `Flannery O'Connor`\n        if (settings.titleCase && settings.caseLetterApostrophe) {\n            output = output.replace(/[A-Z]\\'(.)/g, function (m, m1) {\n                return 'O\\'' + m1.toUpperCase();\n            });\n        }\n\n        return output;\n\n    }\n\n    function matchIdentifierToList(str, identifiers) {\n        if (!identifiers || !identifiers.length) {\n            return false;\n        }\n        var identifier = str.split('@')[0];\n        var match = false;\n        for (var i = 0; i < identifiers.length; i++) {\n            if (identifier === identifiers[i]) {\n                match = true;\n                break;\n            }\n        }\n        return match;\n    }\n\n    function reverseDomainAndIdentifier(str) {\n        var provider = str.split('@')[1];\n        var host = provider.split('.')[0];\n        return host;\n    }\n\n    function titleCase(str) {\n        return str.toLowerCase().split(' ').map(function (word) {\n            return (word.charAt(0).toUpperCase() + word.slice(1));\n        }).join(' ');\n    }\n\n\n}());\n\nmodule.exports = emailToName;\n"],
  "mappings": "AAAA,KAAM,aAAe,WAEjB,KAAM,GAAW,CACb,cAAe,GACf,gBAAiB,GACjB,UAAW,GACX,OAAQ,GACR,qBAAsB,GACtB,6BAA8B,GAC9B,+BAAgC,GAChC,0BAA2B,GAC3B,wBAAyB,GACzB,0BAA2B,CAAC,QAAS,KAAM,QAAS,WACpD,4BAA6B,GAC7B,aAAc,IAGZ,EAAS,CAAC,KAAM,MAAO,KAAM,KAAM,QACnC,EAAW,CAAC,KAAM,MAAO,KAAM,OAC/B,EAAgB,CAAC,KAAM,MAAO,MAEpC,MAAO,CACH,QAAS,GAKb,WAAiB,EAAK,GAElB,GAAI,GAAS,GAEb,KAAM,GAAW,OAAO,OAAO,GAAI,EAAU,GAGvC,EAAqB,EAAsB,EAAK,EAAS,2BAIzD,EAAqB,EAAsB,EAAK,EAAS,cAK/D,MAAI,GAAS,6BAAgC,IAAsB,GAC/D,EAAS,EAA2B,GAEpC,EAAS,EAAI,MAAM,KAAK,GAKxB,EAAS,iBACT,GAAS,EAAO,MAAM,KAAK,IAG3B,EAAS,eACT,GAAS,EAAO,QAAQ,MAAO,KAKnC,EAAS,EAAO,QAAQ,MAAO,KAI/B,EAAS,EAAO,QAAQ,KAAM,KAI9B,EAAS,EAAO,QAAQ,SAAU,KAIlC,EAAS,EAAO,OAIZ,EAAS,WACT,GAAS,EAAU,IAKnB,EAAS,8BACT,EAAc,QAAQ,SAAU,GAC5B,GAAI,GAAK,GAAI,QAAO,OAAS,EAAS,KAAM,MAC5C,EAAS,EAAO,QAAQ,EAAI,SAAU,GAClC,MAAO,GAAE,kBAOjB,EAAS,gCACT,EAAS,QAAQ,SAAU,GACvB,GAAI,GAAK,GAAI,QAAO,OAAS,EAAS,KAAM,MAC5C,EAAS,EAAO,QAAQ,EAAI,SAAU,GAClC,MAAO,IAAM,EAAI,QAOzB,EAAS,2BACT,EAAO,QAAQ,SAAU,GACrB,GAAI,GAAK,GAAI,QAAO,KAAO,EAAS,OAAQ,MAC5C,EAAS,EAAO,QAAQ,EAAI,SAAU,GAClC,MAAO,GAAE,QAAQ,IAAK,UAM9B,EAAS,yBACT,GAAS,EACJ,QAAQ,iBAAkB,MAC1B,QAAQ,UAAW,MACnB,QAAQ,oBAAqB,OAC7B,QAAQ,kBAAmB,UAC3B,QAAQ,iBAAkB,OAC1B,QAAQ,gBAAiB,QACzB,QAAQ,UAAW,MACnB,QAAQ,UAAW,MACnB,QAAQ,eAAgB,OACxB,QAAQ,kBAAmB,OAC3B,QAAQ,WAAY,QAKzB,EAAS,WAAa,EAAS,QAC/B,GAAS,EAAO,QAAQ,SAAU,SAAU,EAAG,GAC3C,MAAO,KAAO,EAAG,iBAMrB,EAAS,WAAa,EAAS,sBAC/B,GAAS,EAAO,QAAQ,cAAe,SAAU,EAAG,GAChD,MAAO,KAAQ,EAAG,iBAInB,EAIX,WAA+B,EAAK,GAChC,GAAI,CAAC,GAAe,CAAC,EAAY,OAC7B,MAAO,GAIX,OAFI,GAAa,EAAI,MAAM,KAAK,GAC5B,EAAQ,GACH,EAAI,EAAG,EAAI,EAAY,OAAQ,IACpC,GAAI,IAAe,EAAY,IAC3B,EAAQ,GACR,MAGR,MAAO,GAGX,WAAoC,GAChC,GAAI,GAAW,EAAI,MAAM,KAAK,GAC1B,EAAO,EAAS,MAAM,KAAK,GAC/B,MAAO,GAGX,WAAmB,GACf,MAAO,GAAI,cAAc,MAAM,KAAK,IAAI,SAAU,GAC9C,MAAQ,GAAK,OAAO,GAAG,cAAgB,EAAK,MAAM,KACnD,KAAK,SAMhB,OAAO,QAAU",
  "names": []
}
